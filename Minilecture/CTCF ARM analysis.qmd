---
title: "CTCF ARM analysis"
author: "Steven Gan"
format: pdf
toc: true
---

# Frequency Count for CTCF Sequence

```{r}
library(stringr)

analyze_sequence <- function(sequence) {
  # Initialize the result data frame
  result <- data.frame(site = integer(), frequency = numeric())
  
  # Set the window size
  window_size <- 5

  # Calculate the number of chunks
  n <- nchar(sequence) - window_size + 1

  # Analyze each chunk
  for (i in 1:n) {
    chunk <- substr(sequence, i, i + window_size - 1)
    
    # Count the occurrences of K and R
    k_count <- str_count(chunk, "k")
    r_count <- str_count(chunk, "r")
    
    # Calculate the frequency
    frequency <- (k_count + r_count) / nchar(chunk)
    
    # Add the site and frequency to the result
    result <- rbind(result, data.frame(site = i, frequency = frequency))
  }
  return(result)
}

```

```{r}
sequence <- "megdaveaiveesetfikgkerktyqrrreggqeedachlpqnqtdggevvqdvnssvqmvmmeqldptllqmktevmegtvapeaeaavddtqiitlqvvnmeeqpinigelqlvqvpvpvtvpvattsveelqgayenevskeglaesepmichtlplpegfqvvkvgangevetleqgelppqedpswqkdpdyqppakktkktkksklryteegkdvdvsvydfeeeqqegllsevnaekvvgnmkppkptkikkkgvkktfqcelcsytcprrsnldrhmkshtderphkchlcgrafrtvtllrnhlnthtgtrphkcpdcdmafvtsgelvrhrrykhthekpfkcsmcdyasvevsklkrhirshtgerpfqcslcsyasrdtyklkrhmrthsgekpyecyicharftqsgtmkmhilqkhtenvakfhcphcdtviarksdlgvhlrkqhsyieqgkkcrycdavfheryaliqhqkshknekrfkcdqcdyacrqerhmimhkrthtgekpyacshcdktfrqkqlldmhfkryhdpnfvpaafvcskcgktftrrntmarhadncagpdgvegenggetkkskrgrkrkmrskkedssdsenaepdlddnedeeepaveiepepepqpvtpapppakkrrgrppgrtnqpkqnqptaiiqvedqntgaieniivevkkepdaepaegeeeeaqpaatdapngdltpemilsmmdr"

result <- analyze_sequence(sequence)
```


# Define RBR-ID Region

## RBR-ID score count

```{r, message=FALSE}
library(readxl)
library(dplyr)

# Read the Excel file
df1 <- read_excel("CTCF_RBR-ID_K562.xlsx")
df2 <- read_excel("CTCF_RBR-ID.xlsx")

# Create a data frame to store the scores for each amino acid
aa_scores <- data.frame(site = 1:nchar(sequence), score = 0)

# # Loop through the regions and assign the scores to the amino acids
for (i in 1:nrow(df1)) {
  aa_scores$score[aa_scores$site %in% df1$start[i]:df1$end[i]] <-
    aa_scores$score[aa_scores$site %in% df1$start[i]:df1$end[i]] + df1$score[i]
}

# Loop through the regions and assign the scores to the amino acids
for (i in 1:nrow(df2)) {
  aa_scores$score[aa_scores$site %in% df2$start[i]:df2$end[i]] <- 
    aa_scores$score[aa_scores$site %in% df2$start[i]:df2$end[i]] + df2$score[i]
}

# Replace scores that are less than 0 with 0
aa_scores$score[aa_scores$score < 0] <- 0
```

```{r}
library(ggplot2)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(gridExtra))
library(ggthemes)
source('ggplot_theme_Publication-2.R')

# Plot the scores
ggplot(aa_scores, aes(x = site, y = score)) +
  geom_line() +
  labs(x = "Site", y = "Score", 
       title = "Score of Each Amino Acid") +
  theme_Publication()
```

## Define RBR-ID sites with score > 1

```{r}
# Initialize vectors to store the start and end sites
start_sites <- c()
end_sites <- c()

# Initialize a variable to keep track of whether we're in a region where the score > 1
in_region <- FALSE

# Loop through the sites
for (i in 1:nrow(aa_scores)) {
  # If we're not currently in a region and we find a site where the score > 1
  if (!in_region && aa_scores$score[i] > 1.5) {
    # Record the start site and set in_region to TRUE
    start_sites <- c(start_sites, aa_scores$site[i])
    in_region <- TRUE
  # If we're currently in a region and we find a site where the score <= 1
  } else if (in_region && aa_scores$score[i] <= 1.5) {
    # Record the end site and set in_region to FALSE
    end_sites <- c(end_sites, aa_scores$site[i-1])
    in_region <- FALSE
  }
}

# If we're still in a region at the end of the loop, record the last site as the end site
if (in_region) {
  end_sites <- c(end_sites, aa_scores$site[nrow(aa_scores)])
}

# Combine the start and end sites into a data frame
rbr_regions <- data.frame(start = start_sites, end = end_sites)
```


# Define ZF regions

```{r}
# Define the ZF regions
zf_regions <- data.frame(
  start = c(268, 296, 324, 353, 381, 409, 439, 469, 497, 525, 557), 
  end = c(288, 316, 347, 373, 401, 426, 457, 489, 517, 546, 573)
)
```

# Define PAR regions

```{r}
# Define the PAR regions
par_regions <- data.frame(
  start = c(145, 220), 
  end = c(167, 244)
)
```

# Define Phospho regions

```{r}
# Define the Phospho regions
phos_regions <- data.frame(
  start = c(604), 
  end = c(612)
)
```

# Define Î”ARM regions

```{r}
# Define the ARM delete regions
darm_regions <- data.frame(
  start = c(576), 
  end = c(612)
)
```

# Plot

## original

```{r}
plot_frequency <- function(subtitle, result) {
#  legend_data <- data.frame(color = c("ZF", "RBR", "Phospho", 
#                                      "Poly(ADP-ribose)", "dARM"), 
#                            label = c("ZF", "RBR", "Phospho", 
#                                      "Poly(ADP-ribose)", "dARM"))

  p <- ggplot() +
    geom_rect(data = zf_regions, 
              aes(xmin = start, xmax = end, 
                  ymin = -0.025, ymax = 0.025, fill = "ZF", ), alpha = 1) +
    geom_rect(data = rbr_regions, 
              aes(xmin = start, xmax = end, 
                  ymin = -0.1, ymax = -0.05, fill = "RBR"), alpha = 1) +
    geom_rect(data = phos_regions, 
              aes(xmin = start, xmax = end, 
                  ymin = -0.025, ymax = 0.025, fill = "Phosph"), 
              alpha = 1) +
    geom_rect(data = par_regions, 
              aes(xmin = start, xmax = end, 
                  ymin = -0.025, ymax = 0.025, fill = "Poly(ADP-ribose)"), 
              alpha = 1) +
    geom_rect(data = darm_regions, 
              aes(xmin = start, xmax = end, 
                  ymin = -0.1, ymax = -0.05, fill = "dARM"), alpha = 1) +
    geom_area(data = result, 
              aes(x = site, y = frequency, fill = "ARM"), alpha = 0.7) +
    labs(x = "Amino Acids (AA)", y = "Frequency of K and R",
         title = "Frequency of K and R in 5-AA Chunks",
         subtitle = subtitle,
         fill = "") +
#    scale_fill_manual(
#      values = c("ARM" = "orange", "ZF" = "red", "RBR" = "blue", 
#                 "Phospho" = "green", "Poly(ADP-ribose)" = "purple", 
#                 "dARM" = "black"), 
#      labels = c("ARM", "dARM", "Poly(ADP-ribose)", "Phospho", "RBR", "ZF", "dARM")
#      ) +
    geom_segment(aes(x = 1, xend = nchar(sequence), y = 0, yend = 0), 
                 color = "black") +
    scale_colour_Publication() + theme_Publication()
  return(p)
}

plot <- plot_frequency("RBR-ID score > 1", result)
print(plot)
```

## Freq > 0.5

```{r}
# Identify peak sites with frequency > 0.5
peak_sites <- which(result$frequency > 0.5)

# Initialize a vector to store all relevant sites
relevant_sites <- c()

# For each peak, expand left and right until frequency drops to 0
for (peak in peak_sites) {
  # Expand to the left
  left_site <- peak
  while (left_site > 1 && result$frequency[left_site - 1] > 0) {
    left_site <- left_site - 1
  }
  
  # Expand to the right
  right_site <- peak
  while (right_site < nrow(result) && result$frequency[right_site + 1] > 0) {
    right_site <- right_site + 1
  }
  
  # Add the sites to the relevant_sites vector
  relevant_sites <- c(relevant_sites, seq(from = left_site, to = right_site))
}

# Wipe out the frequencies at sites that are not recorded
result$frequency[-relevant_sites] <- 0
```


```{r}
plot <- plot_frequency("RBR-ID score > 1, Freq. > 0.5", result)
print(plot)
```

## Freq > 0.5, pLDDT < 70

```{r}
library(bio3d)

# Input a PDB file
pdb <- read.pdb("CTCF_AF.pdb")

# Filter for only amino acids with B-factor > 70
high_bfactor_aa <- pdb$atom[pdb$atom$b > 70 & !is.na(pdb$atom$resno), ]

# Record the sites
sites_to_wipe <- unique(high_bfactor_aa$resno)

# Wipe out the frequencies at these sites
result$frequency[result$site %in% sites_to_wipe] <- 0
```

```{r}
plot <- plot_frequency("RBR-ID score > 1, Freq. > 0.5, pLDDT < 70", result)
print(plot)
```

